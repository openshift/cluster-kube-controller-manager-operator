kind: Pod
apiVersion: v1
metadata:
  name: bootstrap-kube-controller-manager
  namespace: kube-system
  labels:
    openshift.io/control-plane: "true"
    openshift.io/component: "controller-manager"
  annotations:
    openshift.io/run-level: "0"
    target.workload.openshift.io/management: '{"effect": "PreferredDuringScheduling"}'
spec:
  restartPolicy: Always
  hostNetwork: true
  containers:
  - name: kube-controller-manager
    image: '{{ .Image }}'
    imagePullPolicy: '{{ .ImagePullPolicy }}'
    ports:
      - containerPort: 10257
    command: ["hyperkube", "kube-controller-manager"]
    args:
    - --openshift-config=/etc/kubernetes/config/{{ .ConfigFileName }}
    - --kubeconfig=/etc/kubernetes/secrets/kubeconfig
    - --v=2{{ .ExtendedArguments }}
    resources:
      requests:
        memory: 200Mi
        cpu: 60m
    volumeMounts:
    - mountPath: /etc/ssl/certs
      name: ssl-certs-host
      readOnly: true
    - mountPath: /etc/kubernetes/secrets
      name: secrets
      readOnly: true
    - mountPath: /etc/kubernetes/cloud
      name: etc-kubernetes-cloud
      readOnly: true
    - mountPath: /etc/kubernetes/config
      name: config
      readOnly: true
    - mountPath: /var/log/bootstrap-control-plane
      name: logs
    - mountPath: /tmp
      name: tmp
    - mountPath: /etc/pki/ca-trust/extracted/pem
      name: ca-trust
    - mountPath: /var/run/kubernetes
      name: var-run-kubernetes
    securityContext:
      readOnlyRootFilesystem: true
    startupProbe:
      httpGet:
        scheme: HTTPS
        port: 10257
        path: healthz
      initialDelaySeconds: 0
      timeoutSeconds: 3
    readinessProbe:
      httpGet:
        scheme: HTTPS
        port: 10257
        path: healthz
      initialDelaySeconds: 10
      timeoutSeconds: 10
    livenessProbe:
      httpGet:
        scheme: HTTPS
        port: 10257
        path: healthz
      initialDelaySeconds: 45
      timeoutSeconds: 10
  - name: cluster-policy-controller
    env:
      - name: POD_NAME
        valueFrom:
          fieldRef:
            fieldPath: metadata.name
      - name: POD_NAMESPACE
        valueFrom:
          fieldRef:
            fieldPath: metadata.namespace
    image: '{{ .ClusterPolicyControllerImage }}'
    imagePullPolicy: '{{ .ImagePullPolicy }}'
    command: ["cluster-policy-controller", "start"]
    args:
    - --config=/etc/kubernetes/config/{{ .ClusterPolicyControllerConfigFileName }}
    - --kubeconfig=/etc/kubernetes/secrets/kubeconfig
    - --namespace=$(POD_NAMESPACE)
    - --v=2
    resources:
      requests:
        memory: 200Mi
        cpu: 10m
    ports:
      - containerPort: 10357
    volumeMounts:
    - mountPath: /etc/ssl/certs
      name: ssl-certs-host
      readOnly: true
    - mountPath: /etc/kubernetes/secrets
      name: secrets
      readOnly: true
    - mountPath: /etc/kubernetes/cloud
      name: etc-kubernetes-cloud
      readOnly: true
    - mountPath: /etc/kubernetes/config
      name: config
      readOnly: true
    - mountPath: /var/log/bootstrap-control-plane
      name: logs
    - mountPath: /tmp
      name: tmp
    - mountPath: /etc/pki/ca-trust/extracted/pem
      name: ca-trust
    - mountPath: /var/run/kubernetes
      name: var-run-kubernetes
    securityContext:
      readOnlyRootFilesystem: true
    startupProbe:
      httpGet:
        scheme: HTTPS
        port: 10357
        path: healthz
      initialDelaySeconds: 0
      timeoutSeconds: 3
    livenessProbe:
      httpGet:
        scheme: HTTPS
        port: 10357
        path: healthz
      initialDelaySeconds: 45
      timeoutSeconds: 10
    readinessProbe:
      httpGet:
        scheme: HTTPS
        port: 10357
        path: healthz
      initialDelaySeconds: 10
      timeoutSeconds: 10
  volumes:
  - hostPath:
      path: '{{ .SecretsHostPath }}'
    name: secrets
  - hostPath:
      path: '{{ .CloudProviderHostPath }}'
    name: etc-kubernetes-cloud
  - hostPath:
      path: '{{ .ConfigHostPath }}'
    name: config
  - hostPath:
      path: /etc/ssl/certs
    name: ssl-certs-host
  - hostPath:
      path: /var/log/bootstrap-control-plane
    name: logs
  - emptyDir: {}
    name: tmp
  - emptyDir: {}
    name: ca-trust
  - emptyDir: {}
    name: var-run-kubernetes
